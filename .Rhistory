devtools::document()
devtools::document()
devtools::build()
devtools::install_github("Melany-hu/sysAgNPs")
library(sysAgNPs)
dataset <- rio::import("dataset.xlsx")
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
dis_data <- sys_discretize(dataset, var_dis)
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
??desc
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1, "sysAgNPs_line_radar/")
```R
users_data <- rio::import("users_data.xlsx")
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
??mutate_all
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
devtools::document()
devtools::build()
library(sysAgNPs)
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
View(dataset)
??c_across
devtools::document()
devtools::build()
library(sysAgNPs)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
# Transition score
TS <- sys_TS(users_data, dataset, 6, var_dis)
??desc
??arangge
??arange
devtools::document()
devtools::build()
# Transition score
TS <- sys_TS(users_data, dataset, 6, var_dis)
sys_TS <- function(data, dataset, n_iter, vars_to_discretize){
# Convert categorical variables into discrete variables.
dis_data <- sys_discretize(dataset, vars_to_discretize)
# Calculate transfer probability matrix.
tran_matrix <- sys_tran(dis_data)
# Loop "n_iter" times to count the results of each iteration.
iter_prob <- sys_iter(dataset, n_iter, vars_to_discretize)
# Import evaluation criteria of AgNPs.
criteria <- sys_eval_cri(dataset, n_iter, vars_to_discretize)
# Data processing
# Loop through each cell of the data frame.
for (i in 1:nrow(data)) {
for (j in 1:ncol(data)) {
value <- data[i, j]
if (is.na(value)) {
# If the element is NA, replace it with 0.
data[i, j] <- 0
} else {
# Check if the value in data matches a column name in criteria.
if (value %in% colnames(criteria)) {
data[i, j] <- criteria[value]
# The features that are not discretized:
} else {
data[i, j] <- colnames(data)[j]
}
if (data[i, j] %in% colnames(criteria)) {
data[i, j] <- criteria[data[i, j]]
}
}
}
# Sum of score value
row_data <- as.numeric(as.character(data[i, ]))
data$`TS`[i] <- sum(row_data, na.rm = TRUE)
}
data$`TS` <- as.numeric(data$`TS`)
# Return dataframe that contains score value of AgNPs
return(data)
}
# Transition score
TS <- sys_TS(users_data, dataset, 6, var_dis)
library(dplyr)
# Transition score
TS <- sys_TS(users_data, dataset, 6, var_dis)
use warnings()
warnings()
library(sysAgNPs)
```R
dataset <- rio::import("dataset.xlsx")
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
# Save Transition Score criteria
rio::export(TS_criteria,"TS_criteria.xlsx")
```
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
View(TS_criteria)
TS_criteria=as.numeric(TS_criteria)
TS_criteria=as.data.frame(as.numeric(TS_criteria))
View(TS_criteria)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
# Save Transition Score criteria
rio::export(TS_criteria,"TS_criteria.xlsx")
```
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
TS_criteria=as.data.frame(as.numeric(TS_criteria))
View(TS_criteria)
TS_criteria=as.data.frame(lapply(TS_criteria[,ncol(TS_criteria),as.numeric()]))
TS_criteria=as.data.frame(lapply(TS_criteria[,1:ncol(TS_criteria),as.numeric()]))
TS_criteria[,1:ncol(TS_criteria)]=as.numeric(TS_criteria[,1:ncol(TS_criteria)])
View(TS_criteria)
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
TS_criteria[,1:ncol(TS_criteria)]=as.numeric(TS_criteria[,1:ncol(TS_criteria)])
View(TS_criteria)
class(TS_criteria)
structure(TS_criteria)
View(PE)
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
TS_criteria <- sapply(TS_criteria, as.numeric)
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
TS_criteria <- data.frame(sapply(TS_criteria, function(x) as.numeric(as.character(x))), stringsAsFactors = FALSE)
View(TS_criteria)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
# Save Transition Score criteria
rio::export(TS_criteria,"TS_criteria.xlsx")
```
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
View(TS_criteria)
class(TS_criteria)
TS_criteria <- as.factor(TS_criteria)
TS_criteria[,1:ncol(TS_criteria)] <- as.factor(TS_criteria[,1:ncol(TS_criteria)])
ncol(TS_criteria)
numeric_vector <- suppressWarnings(as.numeric(TS_criteria))
TS_criteria = as.numeric(TS_criteria)
TS_criteria = data.frame(TS_criteria)
View(TS_criteria)
sys_eval_cri <- function(binary_dataset, n_iter, vars_to_discretize = NULL) {
if(is.null(vars_to_discretize)) {
# Convert categorical variables into discrete variables.
dis_data <- sys_discretize(binary_dataset, vars_to_discretize)
# Calculate transfer probability matrix.
tran_matrix <- sys_tran(dis_data)
# Initial state probability vector.
M_0 <- rep(1/ncol(dis_data), ncol(dis_data))
# Iterate "n_iter" times to obtain the transfer probability vector.
M_n <- M_0 %*% (tran_matrix %^% n_iter)
M_n <- data.frame(100*M_n)
colnames(M_n) <- colnames(dis_data)
# Three decimal places are reserved.
M_n[,1:ncol(M_n)] %>%
round(3)
# Export the evaluation criteria.
eval <- M_n %>%
as.data.frame()
rownames(eval) <- "Score"
return(eval)
} else {
# Convert categorical variables into discrete variables.
dis_data <- sys_discretize(binary_dataset, vars_to_discretize)
# Calculate transfer probability matrix.
tran_matrix <- sys_tran(dis_data)
# Loop "n_iter" times to count the results of each iteration.
iter_prob <- sys_iter(binary_dataset, n_iter, vars_to_discretize)
# Initial state probability vector.
M_0 <- rep(1/ncol(dis_data), ncol(dis_data))
# Iterate "n_iter" times to obtain the transfer probability vector.
M_n <- M_0 %*% (tran_matrix %^% n_iter)
M_n <- data.frame(M_n)
colnames(M_n) <- colnames(dis_data)
# Group and feature
group_fea <-
iter_prob %>%
select(group, feature) %>%
unique()
# Results
result_mc_score = tibble(group_fea = group_fea, score = M_n %>%
as.numeric()) %>%
unnest(cols = c(group_fea))
# Add up the scores of each category.
# Split into multiple tibbles by group.
grouped <- split(result_mc_score, result_mc_score$group)
needed_groups <- subset(grouped, names(grouped) %in% vars_to_discretize)
# Sort the scores within eight groups, and the score of each level is the sum of the scores of the previous levels.
result_add_score <- needed_groups %>%
map_dfr(function(splitted_df) {
# Sort each tibble in descending order by score.
splitted_df = splitted_df %>%
arrange(-desc(score))
# Pull the score for totalization.
sum_score = splitted_df %>%
pull(score) %>%
accumulate(.f = sum)
# Add the 'sum_score' column, which is the result of the cumulative score.
splitted_df %>%
mutate(sum_score = sum_score)
})
# 'Experimental reagents' and 'Characterization' remains the original scores.
result_add_score %<>%
rbind(
subset(result_mc_score, group %in% setdiff(unique(result_mc_score$group), vars_to_discretize)) %>%
mutate(sum_score = score)
)
# Three decimal places are reserved.
result_add_score$sum_score %<>%
round(3)
# Export the evaluation criteria.
eval <- result_add_score %>%
select(feature, sum_score) %>%
t() %>%
as.numeric()
as.data.frame()
colnames(eval) <- eval[1,]
eval <- eval[-1,]
rownames(eval) <- "Score"
return(eval)
}
}
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
sys_eval_cri <- function(binary_dataset, n_iter, vars_to_discretize = NULL) {
if(is.null(vars_to_discretize)) {
# Convert categorical variables into discrete variables.
dis_data <- sys_discretize(binary_dataset, vars_to_discretize)
# Calculate transfer probability matrix.
tran_matrix <- sys_tran(dis_data)
# Initial state probability vector.
M_0 <- rep(1/ncol(dis_data), ncol(dis_data))
# Iterate "n_iter" times to obtain the transfer probability vector.
M_n <- M_0 %*% (tran_matrix %^% n_iter)
M_n <- data.frame(100*M_n)
colnames(M_n) <- colnames(dis_data)
# Three decimal places are reserved.
M_n[,1:ncol(M_n)] %>%
round(3)
# Export the evaluation criteria.
eval <- M_n %>%
as.data.frame()
rownames(eval) <- "Score"
return(eval)
} else {
# Convert categorical variables into discrete variables.
dis_data <- sys_discretize(binary_dataset, vars_to_discretize)
# Calculate transfer probability matrix.
tran_matrix <- sys_tran(dis_data)
# Loop "n_iter" times to count the results of each iteration.
iter_prob <- sys_iter(binary_dataset, n_iter, vars_to_discretize)
# Initial state probability vector.
M_0 <- rep(1/ncol(dis_data), ncol(dis_data))
# Iterate "n_iter" times to obtain the transfer probability vector.
M_n <- M_0 %*% (tran_matrix %^% n_iter)
M_n <- data.frame(M_n)
colnames(M_n) <- colnames(dis_data)
# Group and feature
group_fea <-
iter_prob %>%
select(group, feature) %>%
unique()
# Results
result_mc_score = tibble(group_fea = group_fea, score = M_n %>%
as.numeric()) %>%
unnest(cols = c(group_fea))
# Add up the scores of each category.
# Split into multiple tibbles by group.
grouped <- split(result_mc_score, result_mc_score$group)
needed_groups <- subset(grouped, names(grouped) %in% vars_to_discretize)
# Sort the scores within eight groups, and the score of each level is the sum of the scores of the previous levels.
result_add_score <- needed_groups %>%
map_dfr(function(splitted_df) {
# Sort each tibble in descending order by score.
splitted_df = splitted_df %>%
arrange(-desc(score))
# Pull the score for totalization.
sum_score = splitted_df %>%
pull(score) %>%
accumulate(.f = sum)
# Add the 'sum_score' column, which is the result of the cumulative score.
splitted_df %>%
mutate(sum_score = sum_score)
})
# 'Experimental reagents' and 'Characterization' remains the original scores.
result_add_score %<>%
rbind(
subset(result_mc_score, group %in% setdiff(unique(result_mc_score$group), vars_to_discretize)) %>%
mutate(sum_score = score)
)
# Three decimal places are reserved.
result_add_score$sum_score %<>%
round(3)
# Export the evaluation criteria.
eval <- result_add_score %>%
select(feature, sum_score) %>%
t() %>%
as.data.frame()
# Transform to numeric
colnames(eval) <- eval[1,]
eval <- eval[-1,]
rownames(eval) <- "Score"
return(eval)
}
}
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
# Save Transition Score criteria
rio::export(TS_criteria,"TS_criteria.xlsx")
```
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
View(TS_criteria)
TS_criteria_num <- as.numeric(TS_criteria)
TS_criteria_num <- as.data.frame(TS_criteria)
View(TS_criteria_num)
TS_criteria_num <- as.numeric(TS_criteria)
TS_criteria_num <- as.data.frame(TS_criteria_num)
TS_criteria_num <-t(TS_criteria_num)
str( TS_criteria_num)
str(TS_criteria)
TS_criteria_num <- as.data.frame(lapply(TS_criteria, as.numeric))
View(TS_criteria_num)
str(TS_criteria_num)
devtools::document()
??lapply
devtools::document()
devtools::build()
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
# Save Transition Score criteria
rio::export(TS_criteria,"TS_criteria.xlsx")
```
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
View(TS_criteria_num)
```R
users_data <- rio::import("users_data.xlsx")
TS <- sys_TS(users_data, dataset, 6, var_dis)
devtools::document()
devtools::build()
TS <- sys_TS(users_data, dataset, 6, var_dis)
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = TS$TS)
# Save sysAgNPs score results
rio::export(sysAgNPs_score, "sysAgNPs_score.xlsx")
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1, "sysAgNPs_line_radar/")
# sysAgNP1
sysAgNPs_line_radar_1
```
devtools::install_github("Melany-hu/sysAgNPs")
```R
dataset <- rio::import("dataset.xlsx")
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
dis_data <- sys_discretize(dataset, var_dis)
library(sysAgNPs)
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
# Transition score
TS <- sys_TS(users_data, dataset, 6, var_dis)
```R
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
```R
users_data <- rio::import("users_data.xlsx")
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
# Transition score
TS <- sys_TS(users_data, dataset, 6, var_dis)
rlang::last_trace()
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = TS$TS)
# Transition score
TS <- sys_TS(users_data, dataset, 6, var_dis)
rlang::last_trace()
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
rlang::last_trace()
devtools::document()
devtools::build()
library(sysAgNPs)
dataset <- rio::import("dataset.xlsx")
dataset <- rio::import("dataset.xlsx")
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
# Export the Transition Score criteria
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
# Save Transition Score criteria
rio::export(TS_criteria,"TS_criteria.xlsx")
```
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
users_data <- rio::import("users_data.xlsx")
# Calculate the Distribution Entropy
DE <- sys_DE(users_data)
# Calculate the Proclivity Entropy
PE <- sys_PE(users_data)
# Calculate the Combination Entropy
CE <- sys_CE(users_data, dataset)
# Transition score
TS <- sys_TS(users_data, dataset, 6, var_dis)
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = TS$TS)
# Save sysAgNPs score results
rio::export(sysAgNPs_score, "sysAgNPs_score.xlsx")
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1, "sysAgNPs_line_radar/")
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1, "sysAgNPs_line_radar/")
??sym
library(rlang)
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1, "sysAgNPs_line_radar/")
# sysAgNP1
sysAgNPs_line_radar_1
```
devtools::document()
devtools::build()
library(sysAgNPs)
```R
dataset <- rio::import("dataset.xlsx")
# Select the columns to be discretized
var_dis <- c("Synthesis methods", "pH", "Temperature (℃)", "Zeta potential (mV)","Size (nm)", "Shape", "Applications")
# Convert categorical variables into discrete variables
dis_data <- sys_discretize(dataset, var_dis)
# Build markov chain and calculate transition matrix
tran_matrix <- sys_tran(dis_data)
# Obtain the relationship between the number of iterations and tolerance
tol_iter <- sys_steady(dis_data, tran_matrix)
# Loop "n_iter" times to count the results of each iteration. The final steady-state result is reached when the number of iterations is "n_iter"
iter_prob <- sys_iter(dataset, 6, var_dis)
TS_criteria <- sys_eval_cri(dataset, 6, var_dis)
users_data <- rio::import("users_data.xlsx")
DE <- sys_DE(users_data)
PE <- sys_PE(users_data)
CE <- sys_CE(users_data, dataset)
TS <- sys_TS(users_data, dataset, 6, var_dis)
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = TS$TS)
# Transition score
T_S <- sys_TS(users_data, dataset, 6, var_dis)
# sysAgNPs score of AgNPs (DE, PE, CE, TS)
sysAgNPs_score <- data.frame(DE = DE$H_pB,
PE = PE$H_pK,
CE = CE$H_pE,
TS = T_S$TS)
# Save sysAgNPs score results
rio::export(sysAgNPs_score, "sysAgNPs_score.xlsx")
View(T_S)
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1, "sysAgNPs_line_radar/")
??sym
devtools::document()
devtools::build()
library(sysAgNPs)
# Line and radar plots of sysAgNPs score
sysAgNPs_line_radar_1 <- sys_line_radar(sysAgNPs_score, 1, "sysAgNPs_line_radar/")
# sysAgNP1
sysAgNPs_line_radar_1
```
View(sysAgNPs_score)
View(DE)
View(dataset)
View(CE)
